<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kakarote.build.equipment.mapper.EquipmentMonitorPointMapper">

    <select id="selectByPage" resultType="com.kakarote.build.equipment.entity.PO.EquipmentMonitorPoint">
        select p.*, a.asset_name as equipmentName
        from b_equipment_monitor_point p
        left join b_equipment_assets a on p.equipment_id = asset_id
        <where>
            <if test="data.monitorType != null and data.monitorType != ''">
                and p.monitor_type = #{data.monitorType,jdbcType=VARCHAR}
            </if>
            <if test="data.pointName != null and data.pointName != ''">
                and p.point_name like concat('%', #{data.pointName,jdbcType=VARCHAR}, '%')
            </if>
        </where>
    </select>
    <select id="listAllProject" resultType="com.kakarote.build.equipment.entity.PO.EquipmentMonitorPoint">
        SELECT
        p.*,
        a.asset_name AS equipmentName,
        b.project_name AS projectName
        FROM
        b_equipment_monitor_point p
        LEFT JOIN b_equipment_assets a ON p.equipment_id = asset_id
        LEFT JOIN b_project_info b ON p.project_id = b.id
        <where>
            <if test="data.monitorType != null and data.monitorType != ''">
                and p.monitor_type = #{data.monitorType,jdbcType=VARCHAR}
            </if>
            <if test="data.pointName != null and data.pointName != ''">
                and p.point_name like concat('%', #{data.pointName,jdbcType=VARCHAR}, '%')
            </if>
            <if test="data.projectId != null and data.projectId != ''">
                and p.project_id = #{data.projectId}
            </if>
            <if test="data.monitorSonType != null and data.monitorSonType != ''">
                and p.monitor_son_type = #{data.monitorSonType,jdbcType=VARCHAR}
            </if>
        </where>
    </select>
    <select id="selectAll" resultType="com.kakarote.build.equipment.entity.PO.EquipmentMonitorPoint">
        select a.*, b.dict_label as monitorSonTypeName
        from (select *
              from b_equipment_monitor_point
              WHERE tenant_id = tenant_id
              AND project_id = project_id) a
        left join (select * from wk_admin_dict_data where dict_type = 'b_equipment_monitor_type_9' and tenant_id = tenant_id) b on a.monitor_son_type = b.dict_value and a.tenant_id = b.tenant_id
    </select>

    <select id="selectRaiseDustDataByPointCode" resultType="java.util.Map">
        select a.id, a.point_code, a.point_name, a.equipment_id, IFNULL(b.value,0) AS value, b.monitor_time
        from b_equipment_monitor_point a
        left join b_equipment_monitor_data b on a.id = b.point_id
        where a.point_code = #{pointCode}
        order by b.monitor_time desc
        limit 1
    </select>

    <select id="getMonitorList" resultType="com.kakarote.build.equipment.entity.PO.EquipmentMonitorPoint">
        select *
        from b_equipment_monitor_point a
        <where>
            monitor_type = #{type}
        </where>
    </select>
    <select id="EnvMonitPont" resultType="java.util.Map">
        select count(a.asset_id) as TotalNum ,
            sum(CASE WHEN a.online = '1' THEN 1 ELSE 0 END) as onLineNum
        from EquOnlineView  a
        inner join (select equt.*, getEquipmentTypeParent(equt.type_id) as typePath from b_equipment_type equt where equt.monitor_type='9' ) t on a.type_id = t.type_id
    </select>

    <select id="EarlyWarningType" resultType="java.util.Map">
      	select point_name as name,'0' as value  from b_equipment_monitor_point where monitor_type='9' GROUP BY monitor_son_type
    </select>

    <select id="selectPointAndMonitorStatus" resultType="java.util.Map">
        SELECT d.*, (CASE WHEN d.status = 'N' THEN '1' ELSE '0' END) isN, e.dict_label,
         (CASE WHEN d.monitor_time &lt; DATE_SUB(NOW(), INTERVAL d.alarm_hour_time HOUR) THEN '1' ELSE '0' END) isTimeout
        FROM (
            SELECT c.* FROM(
                SELECT d.alarm_hour_time,a.id AS point_id, a.equipment_id, a.monitor_type, a.point_code, a.point_name, a.monitor_son_type, a.project_id, a.tenant_id, b.status, b.des, b.monitor_time
                FROM b_equipment_monitor_point a
                INNER JOIN b_equipment_monitor_status b on a.id = b.point_id
                inner join (
                    select IFNULL(aa.alarm_hour_time,#{hour}) as alarm_hour_time,bb.asset_id from b_equipment_type aa
                    left join b_equipment_assets bb on aa.type_id=bb.type_id where
                    !EXISTS(select 1 from b_equipment_type where type_pid=aa.type_id)
                )d on  a.equipment_id=d.asset_id
                HAVING 1
                ORDER BY b.monitor_time DESC) c
            GROUP BY c.point_id) d
        LEFT JOIN (select * from wk_admin_dict_data where dict_type = 'b_equipment_monitor_type_9' and tenant_id = tenant_id) e on d.monitor_son_type = e.dict_value and d.tenant_id = e.tenant_id
    </select>

    <select id="getPointListByIds" resultType="com.kakarote.build.equipment.entity.PO.EquipmentMonitorPoint">
        select *
        from b_equipment_monitor_point
        where id in
        <foreach collection="list" item="id" index="index" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </select>

    <!-- 根据设备获取有效点位  关联实时数据 -->
    <select id="getPointAndAtvalueByAssetId" resultType="com.kakarote.build.equipment.entity.PO.EquipmentMonitorPoint">
        select p.*,a.value,a.monitor_time,a.update_time as dataUpdateTime
        from b_equipment_monitor_point p,b_equipment_monitor_data_at a
        where p.equipment_id = #{assetId} and a.point_id = p.id and p.status = '1'
    </select>
    <select id="getByIdInApi" resultType="com.kakarote.build.equipment.entity.PO.EquipmentMonitorPoint">
        select * from b_equipment_monitor_point where id = #{id}
    </select>

    <select id="selectEnvironmentalData" resultType="java.util.Map">
        select a.id, a.point_code, a.point_name, a.equipment_id, IFNULL(b.value,0) AS value, b.monitor_time
        from b_equipment_monitor_point a
        left join b_equipment_monitor_data b on a.id = b.point_id
        where a.monitor_type = #{data.monitorType} and a.monitor_son_type = #{data.monitorSonType}
        order by b.monitor_time desc
        limit 1
    </select>
</mapper>
